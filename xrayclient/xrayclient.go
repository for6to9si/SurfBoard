package xrayclient

import (
	"SurfBoard/conf"
	"context"
	"fmt"
	"log"
	"sort"
	"strings"
	"time"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	pbObserv "github.com/xtls/xray-core/app/observatory/command"
	pbRoute "github.com/xtls/xray-core/app/router/command"
)

var address string

func Init(grpc conf.Grpc) {
	address = fmt.Sprintf("dns:///%s:%d", grpc.Target.IP, grpc.Target.Port)
	fmt.Printf("Using GRPC IP: %s, Port: %d\n", grpc.Target.IP, grpc.Target.Port)
}

// ListVPNStatuses –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Xray –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö Outbound-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func ListVPNStatuses() string {
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	conn, err := grpc.NewClient(address,
		grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Printf("Xray: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
		return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Xray"
	}
	defer func() {
		if err := conn.Close(); err != nil {
			log.Printf("Xray: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %v", err)
		}
	}()

	client := pbObserv.NewObservatoryServiceClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	resp, err := client.GetOutboundStatus(ctx, &pbObserv.GetOutboundStatusRequest{})
	if err != nil {
		log.Printf("Xray: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å VPN"
	}

	statuses := resp.GetStatus().GetStatus()

	sort.Slice(statuses, func(i, j int) bool {
		if statuses[i].Alive != statuses[j].Alive {
			return statuses[i].Alive // –∂–∏–≤—ã–µ –≤–≤–µ—Ä—Ö
		}
		return statuses[i].Delay < statuses[j].Delay
	})

	var sb strings.Builder
	sb.WriteString("üì° –°–ø–∏—Å–æ–∫ VPN –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å:\n\n")

	for _, s := range statuses {
		icon := "‚úÖ"
		if !s.Alive {
			icon = "‚ùå"
		}
		sb.WriteString(fmt.Sprintf("%s %s ‚Äî %d –º—Å\n", icon, s.OutboundTag, s.Delay))
	}

	return sb.String()
}

func GetCurrentVPN() string {
	conn, err := grpc.NewClient(address,
		grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Xray: %v", err)
		return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
	}
	defer func() {
		if err := conn.Close(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %v", err)
		}
	}()

	client := pbRoute.NewRoutingServiceClient(conn)

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	resp, err := client.GetBalancerInfo(ctx, &pbRoute.GetBalancerInfoRequest{
		Tag: "bestVPN",
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ"
	}

	balancer := resp.GetBalancer()
	if balancer == nil {
		return "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
	}

	// 1. –ï—Å–ª–∏ –µ—Å—Ç—å override.target ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
	if override := balancer.GetOverride(); override != nil && override.GetTarget() != "" {
		return override.GetTarget()
	}

	// 2. –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –∏–∑ principleTarget.tag
	if tags := balancer.GetPrincipleTarget().GetTag(); len(tags) > 0 {
		return tags[0]
	}

	return "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö VPN"
}
